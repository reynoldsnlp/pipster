
========================================================================
========================================================================
    THE FOLLOWING IS DYNAMICALLY ADAPTED FROM `pip install --help`,     
   SHOWING PYTHON KEYWORD ARGUMENTS INSTEAD OF COMMAND-LINE OPTIONS.    
========================================================================
========================================================================

Description:
  Install packages from:
  
  - PyPI (and other indexes) using requirement specifiers.
  - VCS project urls.
  - Local project directories.
  - Local or remote source archives.
  
  pip also supports installing from "requirements files", which provide
  an easy way to specify a whole environment to be installed.

Install Options:
  r="<file>", requirement="<file>",
  r=["<file1>", "<file2>"], requirement=["<file1>", "<file2>"]
                              Install from the given requirements file.
                              This option can be used multiple times.
  c="<file>", constraint="<file>",
  c=["<file1>", "<file2>"], constraint=["<file1>", "<file2>"]
                              Constrain versions using the given
                              constraints file. This option can be used
                              multiple times.
  deps=False                  Don't install package dependencies.
  pre=True                    Include pre-release and development
                              versions. By default, pip only finds
                              stable versions.
  e="<path/url>", editable="<path/url>",
  e=["<path/url1>", "<path/url2>"], editable=["<path/url1>", "<path/url2>"]
                              Install a project in editable mode (i.e.
                              setuptools "develop mode") from a local
                              project path or a VCS url.
  dry_run=True                Don't actually install anything, just
                              print what would be. Can be used in
                              combination with `ignore_installed` to
                              'resolve' the requirements.
  t="<dir>", target="<dir>"   Install packages into <dir>. By default
                              this will not replace existing
                              files/folders in <dir>. Use `upgrade` to
                              replace existing packages in <dir> with
                              new versions.
  platform="<platform>",
  platform=["<platform1>", "<platform2>"]
                              Only use wheels compatible with
                              <platform>. Defaults to the platform of
                              the running system. Use this option
                              multiple times to specify multiple
                              platforms supported by the target
                              interpreter.
  python_version="<python_version>"
                              The Python interpreter version to use for
                              wheel and "Requires-Python" compatibility
                              checks. Defaults to a version derived from
                              the running interpreter. The version can
                              be specified using up to three dot-
                              separated integers (e.g. "3" for 3.0.0,
                              "3.7" for 3.7.0, or "3.7.3"). A major-
                              minor version can also be given as a
                              string without dots (e.g. "37" for 3.7.0).
  implementation="<implementation>"
                              Only use wheels compatible with Python
                              implementation <implementation>, e.g.
                              'pp', 'jy', 'cp',  or 'ip'. If not
                              specified, then the current interpreter
                              implementation is used.  Use 'py' to force
                              implementation-agnostic wheels.
  abi="<abi>",
  abi=["<abi1>", "<abi2>"]
                              Only use wheels compatible with Python abi
                              <abi>, e.g. 'pypy_41'. If not specified,
                              then the current interpreter abi tag is
                              used. Use this option multiple times to
                              specify multiple abis supported by the
                              target interpreter. Generally you will
                              need to specify `implementation`,
                              `platform`, and `python_version` when
                              using this option.
  user=True                   Install to the Python user install
                              directory for your platform. Typically
                              ~/.local/, or %APPDATA%\Python on Windows.
                              (See the Python documentation for
                              site.USER_BASE for full details.)
  root="<dir>"                Install everything relative to this
                              alternate root directory.
  prefix="<dir>"              Installation prefix where lib, bin and
                              other top-level folders are placed. Note
                              that the resulting installation may
                              contain scripts and other resources which
                              reference the Python interpreter of pip,
                              and not that of ```prefix```. See also the
                              ```python``` option if the intention is to
                              install packages into another (possibly
                              pip-free) environment.
  src="<dir>"                 Directory to check out editable projects
                              into. The default in a virtualenv is
                              "<venv path>/src". The default for global
                              installs is "<current dir>/src".
  U=True, upgrade=True        Upgrade all specified packages to the
                              newest available version. The handling of
                              dependencies depends on the upgrade-
                              strategy used.
  upgrade_strategy="<upgrade_strategy>"
                              Determines how dependency upgrading should
                              be handled [default: %default]. "eager" -
                              dependencies are upgraded regardless of
                              whether the currently installed version
                              satisfies the requirements of the upgraded
                              package(s). "only-if-needed" -  are
                              upgraded only when they do not satisfy the
                              requirements of the upgraded package(s).
  force_reinstall=True        Reinstall all packages even if they are
                              already up-to-date.
  I=True, ignore_installed=True
                              Ignore the installed packages, overwriting
                              them. This can break your system if the
                              existing package is of a different version
                              or was installed with a different package
                              manager!
  ignore_requires_python=True
                              Ignore the Requires-Python information.
  build_isolation=False       Disable isolation when building a modern
                              source distribution. Build dependencies
                              specified by PEP 518 must be already
                              installed if this option is used.
  use_pep517=True             Use PEP 517 for building source
                              distributions (use `use_pep517=False` to
                              force legacy behaviour).
  check_build_dependencies=True
                              Check the build dependencies when PEP517
                              is used.
  break_system_packages=True  Allow pip to modify an EXTERNALLY-MANAGED
                              Python installation
  C="<settings>", config_settings="<settings>"
                              Configuration settings to be passed to the
                              PEP 517 build backend. Settings take the
                              form KEY=VALUE. Use multiple
                              `config_settings` options to pass multiple
                              keys to the backend.
  global_option="<options>",
  global_option=["<options1>", "<options2>"]
                              Extra global options to be supplied to the
                              setup.py call before the install or
                              bdist_wheel command.
  compile=True                Compile Python source files to bytecode
  compile=False               Do not compile Python source files to
                              bytecode
  warn_script_location=False  Do not warn when installing scripts
                              outside PATH
  warn_conflicts=False        Do not warn about broken dependencies
  binary=False                Do not use binary packages. Can be
                              supplied multiple times, and each time
                              adds to the existing value. Accepts either
                              ":all:" to disable all binary packages,
                              ":none:" to empty the set (notice the
                              colons), or one or more package names with
                              commas between them (no colons). Note that
                              some packages are tricky to compile and
                              may fail to install when this option is
                              used on them.
  only_binary="<format_control>"
                              Do not use source packages. Can be
                              supplied multiple times, and each time
                              adds to the existing value. Accepts either
                              ":all:" to disable all source packages,
                              ":none:" to empty the set, or one or more
                              package names with commas between them.
                              Packages without binary distributions will
                              fail to install when this option is used
                              on them.
  prefer_binary=True          Prefer older binary packages over newer
                              source packages.
  require_hashes=True         Require a hash to check each requirement
                              against, for repeatable installs. This
                              option is implied when any package in a
                              requirements file has a `hash` option.
  progress_bar="<progress_bar>"
                              Specify whether the progress bar should be
                              used [on, off] (default: on)
  root_user_action="<root_user_action>"
                              Action if pip is run as a root user. By
                              default, a warning message is shown.
  report="<file>"             Generate a JSON file describing what pip
                              did to install the provided requirements.
                              Can be used in combination with `dry_run`
                              and `ignore_installed` to 'resolve' the
                              requirements. When - is used as file name
                              it writes to stdout. When writing to
                              stdout, please combine with the `quiet`
                              option to avoid mixing pip logging output
                              with JSON output.
  clean=False                 Don't clean up build directories.

Package Index Options:
  i="<url>", index_url="<url>"
                              Base URL of the Python Package Index
                              (default %default). This should point to a
                              repository compliant with PEP 503 (the
                              simple repository API) or a local
                              directory laid out in the same format.
  extra_index_url="<url>",
  extra_index_url=["<url1>", "<url2>"]
                              Extra URLs of package indexes to use in
                              addition to `index_url`. Should follow the
                              same rules as `index_url`.
  index=False                 Ignore package index (only looking at
                              `find_links` URLs instead).
  f="<url>", find_links="<url>",
  f=["<url1>", "<url2>"], find_links=["<url1>", "<url2>"]
                              If a URL or path to an html file, then
                              parse for links to archives such as sdist
                              (.tar.gz) or wheel (.whl) files. If a
                              local path or file:// URL that's a
                              directory, then look for archives in the
                              directory listing. Links to VCS project
                              URLs are not supported.

General Options:
  h=True, help=True           Show help.
  debug=True                  Let unhandled exceptions propagate outside
                              the main subroutine, instead of logging
                              them to stderr.
  isolated=True               Run pip in an isolated mode, ignoring
                              environment variables and user
                              configuration.
  require_virtualenv=True     Allow pip to only run in a virtual
                              environment; exit with an error otherwise.
  python="<python>"           Run pip with the specified Python
                              interpreter.
  v=1, v=2, v=3, verbose={1/2/3}
                              Give more output. Option is additive, and
                              can be used up to 3 times.
  V=True, version=True        Show version and exit.
  q=1, q=2, q=3, quiet={1/2/3}
                              Give less output. Option is additive, and
                              can be used up to 3 times (corresponding
                              to WARNING, ERROR, and CRITICAL logging
                              levels).
  log="<path>"                Path to a verbose appending log.
  input=False                 Disable prompting for input.
  keyring_provider="<keyring_provider>"
                              Enable the credential lookup via the
                              keyring library if user input is allowed.
                              Specify which mechanism to use [disabled,
                              import, subprocess]. (default: disabled)
  proxy="<proxy>"             Specify a proxy in the form
                              scheme://[user:passwd@]proxy.server:port.
  retries="<retries>"         Maximum number of retries each connection
                              should attempt (default %default times).
  timeout="<sec>"             Set the socket timeout (default %default
                              seconds).
  exists_action="<action>",
  exists_action=["<action1>", "<action2>"]
                              Default action when a path already exists:
                              (s)witch, (i)gnore, (w)ipe, (b)ackup,
                              (a)bort.
  trusted_host="<hostname>",
  trusted_host=["<hostname1>", "<hostname2>"]
                              Mark this host or host:port pair as
                              trusted, even though it does not have
                              valid or any HTTPS.
  cert="<path>"               Path to PEM-encoded CA certificate bundle.
                              If provided, overrides the default. See
                              'SSL Certificate Verification' in pip
                              documentation for more information.
  client_cert="<path>"        Path to SSL client certificate, a single
                              file containing the private key and the
                              certificate in PEM format.
  cache_dir="<dir>"           Store the cache data in <dir>.
  cache_dir=False             Disable the cache.
  disable_pip_version_check=True
                              Don't periodically check PyPI to determine
                              whether a new version of pip is available
                              for download. Implied with `index=False`.
  color=False                 Suppress colored output.
  python_version_warning=False
                              Silence deprecation warnings for upcoming
                              unsupported Pythons.
  use_feature="<feature>",
  use_feature=["<feature1>", "<feature2>"]
                              Enable new functionality, that may be
                              backward incompatible.
  use_deprecated="<feature>",
  use_deprecated=["<feature1>", "<feature2>"]
                              Enable deprecated functionality, that will
                              be removed in the future.

